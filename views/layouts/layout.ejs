<!DOCTYPE html>
<html>

<head>
  <title>New Sails App</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
  <%/* <meta name="robots" content="noindex"> */%>


  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/img.css">
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/styles/table.css">
  <!--STYLES END-->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
</head>

<body>
  <div class="container-fluid">
    <!-- Narbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand" href="#">RERS</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="/rentalInfo/home">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/rentalInfo/search">Search</a>
          </li>
          <li class="nav-item" id="navCreate">
            <a class="nav-link" href="/rentalInfo/create">Create</a>
          </li>
          <li class="nav-item" id="navAdmin">
            <a class="nav-link" href="/rentalInfo/admin">Admin</a>
          </li>
          <li class="nav-item" id="navMyRentals">
            <a class="nav-link" href="/user/myRentals">My Rentals</a>
          </li>
        </ul>
        <ul class="navbar-nav ml-auto">
          <!-- <li id="isNotLogin"><a href="/user/login"> Login</a></li> -->
          <!-- Button trigger modal -->
          <div id="isNotLogin">
            <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal">
              Login
            </button>

            <!-- Modal -->
            <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
              <div class="modal-dialog" role="document">
                <div class="modal-content">
                  <div class="modal-body">
                    <div class="form-group">
                      <label for="exampleInputEmail1">User name</label>
                      <input type="text" class="form-control" id="username" placeholder="Enter username"
                        name="username">
                    </div>
                    <div class="form-group">
                      <label for="exampleInputPassword1">Password</label>
                      <input type="password" class="form-control" id="password" placeholder="Password" name="password">
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="login()">Login</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <li id="isLogin">Hi,&nbsp;<%=req.session.username%>.&nbsp;(&nbsp;<span onclick="logout()">Logout</span>&nbsp;)
          </li>
        </ul>
      </div>
    </nav>

    <!-- Jumbotron -->
    <div class="row">
      <div class="col-md-12 col-xs-12">
        <div class="jumbotron jumbotron-fluid">
          <div class="container">
            <h1 class="display-4">Real Estate Rental System</h1>
            <p class="lead">Real Estate Rental Management System is a web-based system to facilitate flatshare and
              finding roommates.
            </p>
          </div>
        </div>
      </div>
    </div>
    <%- body %>
  </div>



  <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

  <!--TEMPLATES-->
  <!--TEMPLATES END-->


  <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


  <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

  <!--SCRIPTS-->
  <script src="/dependencies/sails.io.js"></script>
  <!--SCRIPTS END-->
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
    crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"></script>
  <script src="https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js">
  </script>
  <script>
    //title & nav active
    var userRole = "<%=req.session.userRole%>";
    if (userRole == "admin") {
      $("#navMyRentals").hide();
    } else if (userRole == "client") {
      $("#navCreate").hide();
      $("#navAdmin").hide();
    } else {
      $("#navCreate").hide();
      $("#navAdmin").hide();
      $("#navMyRentals").hide();
    }

    var path = "<%=req.path%>";
    var index;
    var nav = new Array("/rentalInfo/home", "/rentalInfo/search", "/rentalInfo/create", "/rentalInfo/admin", "/user/myRental");
    switch (path) {
      case "/rentalInfo/home":
        index = 0;
        break;
      case "/rentalInfo/search":
        index = 1;
        break;
      case "/rentalInfo/create":
        index = 2;
        break;
      case "/rentalInfo/admin":
        index = 3;
        break;
    };
    if (index in nav) {
      document.querySelector('a[href="<%=req.path%>"]').className += " active";
      title = '<%=req.path%>'.substring(12);
      title = title.charAt(0).toUpperCase() + title.slice(1);
      document.title = title;
    }
    //isLogin?
    if ("<%=req.session.username%>" == "")
      $("#isLogin").hide();
    else
      $("#isNotLogin").hide();

    //login
    async function login() {
      var username = $('#username').val();
      var password = $('#password').val();
      var response = await fetch("/user/login/", {
        method: "POST",
        body: JSON.stringify({ username: username, password: password }),
        credentials: 'same-origin',
      });
      var responseText = await response.text();
      if (response.status != 200) alert(responseText);
      else { alert(responseText); location.reload(); }
    }

    //logout
    async function logout() {
      var r = confirm("Confirm Logout?");

      if (r) {

        var response = await fetch("/user/logout/", {
          method: "POST",
          credentials: 'same-origin',
        });

        var html = await response.text();
        alert(html);
        location.reload();

      }

    };
  </script>
</body>

</html>